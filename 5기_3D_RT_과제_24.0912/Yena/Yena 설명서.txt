/////////////////////////////////////////////////////////////////////////////
//
// Yena 설명서
//
// B3/YENA.R1.
// 2004.Kihong Kim / mad_dog@hanmail.net / www.zero-g.kr
// CopyRight@2004-2017 Zero-G Interactive. All Rights reserved.
//
// 2004.02.24+ 김기홍 Kihong Kim / mad_dog@hanmail.net
// 2007.12.30  Update.(DX9.0c / DXSDK 2007,Nov / GL2.x)
// 2013.02.04. Update.(DX11 / DXSDK 2010,June)
// 2016.12.28. Update.(DX11 / Windows SDK 8.x / VS2015 )
//
/////////////////////////////////////////////////////////////////////////////


[ Yena 버전 ]  Yena 간축버전 
 - Verion : 2.15 A (Academic version)
 - Build  : 18.0306

 
[ Yena 개요 ]

- DiectX / OpenGL 기반 3D/2D 렌더링 엔진.
- 3차원 비디오 게임 개발에 필요한 기본 및 확장 기능 제공 


[ 지원 기능 ]

- 기본 기능  : 디바이스/장치 운용, 셰이더, 문자열 출력, 키보드&마우스 입력.
- 확장 기능  : 카메라, 조명, 공간 시각화 장치(방향축, 그리드), 수학 라이브러리 
- TnL 지원 중단, 구형(1.x) 과 호환 불가



[ 기능별 상세 ]

- 플렛폼 : Windows Desktop, Mac OS (개장중)
- 지원 API (I) : DirectX 11.x , DirextX 12 (예정)
- 지원 API (II): OpenGL 4.x, Vulcan (예정)

- DX API  : DirectX 11 (Windows SDK 8.x)
- DX 수학라이브러리 : DirectXMath (Windows SDK 8.x)
- DX 수학라이브러리 : DirectX Toolkit / SimpleMath  (Feb.07, 2018)
- DX 텍스쳐라이브러리 : DirectXTex (Feb.09, 2018)
- Yena 수학 라이브러리 : ynMath
- Yena 셰이더 프레임워크 : ynShader
- Yena 폰트 지원 : ynFont, 한글(완성형: 11,400 자), DirectX Toolkit / SpriteFont 사용.



[ 빌드 환경 ]

- Visual Studio 2015 update3 
- DX 버전 : DX11, Window SDK 8.1
- 보조 DX 라이브러리 : DirectX Toolkit (Dec.8, 2016)


  
[ 빌드 품목 ] 

  {개발/배포용}
  - Yena.dll      : 32bit, Release ver.
  - Yenad.dll     : 32bit, Debug ver.
  - Yena64.dll	  : 64bit, Release ver.
  - Yena64d.dll   : 64bit, Debug ver.
  {개발자용}
  - Yena*.lib     : 32/64 프로젝트용 lib
  - Yena 설명서.txt   : Yena 사용자 설명서.
  


[ 빌드 필수 헤더 ] 

  * Yena.h     :  응용 어플리케이션 제작시 반드시 소스레벨에서 include 시켜야 합니다.
  * 아래의 [빌드/프로젝트 설정] 참조.



[ 빌드 폴더 구성 ]

  { 작업 폴더 }  
     + { 프로젝트 폴더 }   : 개별 프로젝트 작업 폴더.
     + Yena               : 엔진 폴더 (필수)
     + Bin                : 개별 프로젝트 결과물 폴더 (자동생성)(옵션)
     + Data               : 개별 프로젝트별 추가 리소스 폴더 (옵션)
   


[ 빌드 / 프로젝트 설정 ]  

Yena 를 사용하기 위해서는 아래의 순서대로 Project 속성을 변경/추가 하십시오.

 1. "C/C++>입력>일반>추가 포함 디렉터리" 에 소스폴더 지정.
      (추가) ..\Yena\Inc
      (추가) ..\Yena\DXTK\Inc 
      (추가) ..\Yena\DXTex\Inc 

 2. "링커>일반>추가 라이브러리 디렉터리" 에 라이브러리 폴더 지정.
      (추가) ..\Yena\Lib      
      (추가) ..\Yena\DXTK\Lib
      (추가) ..\Yena\DXTex\Lib

 3. "빌드 이벤트 > 빌드전 이벤트" 에 다음 구문 추가.
  	  (추가) copy "..\Yena\Lib\*.dll"  ".\"

 4. "빌드 이벤트 > 빌드후 이벤트" 에 다음 구문 추가.
	  (추가) copy "$(TargetPath)" ".\"

 5. 메인 헤더를 소스에 첨부.  
      (추가) #include "Yena.h"

 6. 완료.
    
 (참고예제) Yena/Sample/BasicFramework  
 (옵션1) "링커>입력>추가 종속성" 에 라이브러리 파일 지정. (이미 Yena.h 에 포함됨)
         (추가) Yena.lib, DirectXTK.lib 
 (옵션2) DirectXTK 의 각 클래스는 선택적으로 추가 가능. 

 
 
	 
[ 배포시 요구 품목 ]    

  - Visual Studio 2015 재배포패키지 (Restributable Package) :  DX 관련 DLL 들 설치.
  - D3DCompil_47.dll  : DX 셰이더 컴파일러 DLL.  
  - DX 11 지원 그래픽 카드.

	  

[엔진 테스트 최저 사양]  
  OS : Windows XP Home / Version 2002 
       Service Pack 1 / .Net Frame Work 1.1
  CPU : Intel Dual Core 1.83Ghz
  RAM : 4GByte
  VGA : ATI Radeon x1400
  
 * 개발자 S/W, App 비설치 ( VisualStudio / DXSDK )
 * 순수 일반 사용자 시스템 기준.
 * 일반사용자용 DX 런타임 라이브러리 갱신 없음. 
 * TnL 미지원, 셰이더 전용, 구형 엔진(1.x) 과 호환 불가




 [ 알려진 문제점 ]

 문제#1  Err.1.180222
    폰트 출력시 그래픽 상태 오류 발생 
	: AB, 깊이연산, 텍스처 주소 모드 충돌
    : ynTextDraw 가 일반적으로 프레임 루프 마지막에서 사용하는 관계로  
	  호출 후 설정된 상태가 파이프라인에 남게 된며 다음 연산과 충돌이 발생하게 된다. 
	  (DXTK 내부에서는 이를 '초기화', '이전 상태 복구' 코드가 없음) 
    : ynTextDraw 를 엔진 루프 임의 위치에서 호출시에도 동일 문제 발생.
      
	(수정1) 엔진 개정 (v.2.14 / 18.0222a)
	(수정2) 엔진 개정 (v.2.15 / 18.0306a)  -> 문제#2 발생. 


 문제#2  Err.2.180306 
    대량의 폰트 출력시 성능저하 문제. 
	: ynTextDraw 내부의 잦은 상태 백업/복구, 성능저하 발생 	 
	: 약 10% (풀스크린) 
	 -> Batch 출력 등으로의 추후 개선필요.







/////////////////////////////////////////////////////////////////////////////




[ 버전 내역 ]

■ Ver 2.15  (18.0306)

- 폰트 오류 수정
  : 문자열 출력시 사용된 "블렌딩" 연산 상태가 다음 개체 그리기시 부정효과를 발생.
	-> 호출 전/후에 상태객체를 저장/복구 함. 
	   ynFont::Draw
	   ynFont::DrawSV
  
  * 잦은 백업/복구에 의한 성능저하 발생 : 약 10% (풀스크린)
    추후 개선필요.
 

- 렌더링 상태객체 저장 및 복구.
  : ynStateObjectBackup 
    엔진 초기 시동시 1회 호출되어 장치상태를 저장한다.
    이후 호출시 기존 저장된 값은 덮어쓰기 되므로 주의 할 것. 
  : ynStateObjectRestore
   ynStateObjectBackup 에 의해 최근 저장된 상태객체를 복원한다.

- 엔진 기동시 상태객체 전체 저장.
  : YenaSetup

- 버전표시 변경.
  : 버전표시 추가
    (기존) Yena 3.15.A
	(수정) Yena 3.15.A.64	(64비트/릴리즈)
	       Yena 3.15.A.64d  (64비트/디버그)
  : 32비트는 버전표시 없음. 






■ Ver 2.14  (18.0222)(18.0222a)

- 렌더링 상태객체 갱신
  : 기존 상태객체명 제거, 기능적 세분화 
    제거됨) ypStateObject
  : 깊이/스텐실 상태객체 추가 / ypDSState
  : 레스터 상태객체 추가 / ypRState
  : 셈플러 상태객체 추가 / ypBState
  : 블렌드 상태객체 추가 / ypSState
    ynStateObjectCreate
	ynStateObjectUpdate
	ynStateObjectRelease 

- 그리드 깊이연산 수정
  수정전) 깊이테스트 OFF 
  수정후) 깊이테스트 ON, 깊이쓰기 OFF
  : 이전 연산 복구

- 방향축 깊이연산 수정
  : 이전 연산 복구

- Yena::Device 관련 함수 수정
  : ynDeviceSwapChainCreate
  : ynBackBufferCreate
  : ynDepthStencilCreate


- YenaSetup 수정 (18.0222a) 
  : 전역데이터 수정 
    SV_DC
  : 공용장치 생성 
    Camera, Grid/Axis, FX, Timer 등. 
  : 상태객체 설정 (기본값) 
    Depth-ON, Stencil-OFF, AB_OFF, Fill+Cull(CCW), Clamp mode  

- Yena::SV_DC 수정 (18.0222a) 
   : SV_DC / ImmadiateContext 
   : 엔진 전체에서 공유 (Font, StateObject 등)
   : 엔진 전체의 DC 생성은 단일화, YensSetup 에서 생성, YenaRelease 에서 제거한다. 
     pDev->GetImmediateContext(&SV_DC); 

- YenaUpdate 갱신 (18.0222a)
   : 깊이 연산 활성화 (YNDS_DEPTH_ON)(엔진 기본값)
     ynTextDraw 호출시 YNDS_DEPTH_WRITE_OFF 가 적용된다. (18.0222)
	 ynTextDraw 가 일반적으로 프레임 루프 마지막에서 사용하는 관계로  호출후 이 상태가 파이프라인에 남게 된며
	 다음 연산과 충돌이 발생하게 된다. (DXTK 내부에서는 이를 '초기화', '이전 상태 복구' 코드가 없음)
	 이를 방지하기 위해  깊이테스트 활성화(YNDS_DEPTH_ON) 을 적용, 엔진 전체 기본값으로 정한다.  
	 SV_DC->OMSetDepthStencilState(ypDState[YNDS_DEPTH_ON]); 
	 	 

* (18.0222a) 이번 갱신은 사소한 이유에서 출발했으나..큰 작업이 되어버림. ㅎ..
   : StateObject 추가  
     --> Axis 의 축표시(x,y,z) 의 깊이연산 및 배경색 문제가 떠오름.
       --> ynTextDraw 에서 AB/Depth-Write-OFF 추가
	     --> 초기 튜토리얼 에서 깊이연산 오류 발생. 
		    --> Depth Buffer 가 동작되지 않음. (잘 되던 것인데 왜??!!)
		        Depth Buffer 를 본격 운용하는 데모에서는 문제가 없없음. 
		 --> ynTextDraw 호출시 Depth-Write-Off 가 문제.
		    --> DXTK::SpriteFont 에서는 DC 를 초기화 또는 이전 상태로 복구하지 않음. (덴장!)
			   --> YenaUpdate 에서 Depth-On 을 적용하는 것으로 땜방
			     --> DC 를 얻는 코드가 없어서 nullptr  처리..
				   --> DC 획득 코드 추가 : GetImmediateContext
				      --> 엔진 전체에서 개별 "DC 획득/사용/제거" 를 단일화 함.
					     --> YensSetup 에서 DC 생성, YenaRelease 에서 제거.  전역 SV_DC 공유.
						    --> 하루를 까먹다... -_-+)





■ Ver 2.13  ( 18.0221, 18.0222)
 -버전 표시 중복 오류 수정
  수정전) Copyright (C) Zero-G Interactive, 2004-2018 Zero-G Interactive
  수정후) Copyright (C) Zero-G Interactive, 2004-2018

- 버전 표시 함수 갱신
  : YenaSysInfoEx
 
- 주석 수정 (18.0222)
  : 기능상 변화 없음.
  


■ Ver 2.12  ( 18.0221 )
 - DirectXTK 텍스처 API 선언 추가 
   : DXTex.h
     #include "DDSTextureLoader.h"	//DDS 전용 함수들.
	 #include "WICTextureLoader.h"	//WIC 전용 함수들.
 - DirectXTex 선언 추가
   : DXTex.h (이미 추가 되어있음)
   


■ Ver 2.11  ( 18.0217, 18.0218 )
 - DirectX 확장 라이브러리 갱신
    : DirectXTK  (February.7.2018)
    : DirectXTex (February.9.2018)

 - DirectXTex 라이브러리 Path 설정. 
    : DirectX.h

 - DirectX 헤더파일명 변경
    : 기존 DX 의 헤더파일명과의 중복/충돌 방지.	
    : DirectXTK.h --> DXTK.h
	: DirectXTex.h --> DXTex.h
	: 기존의 헤더파일은 구형호환성을 위해 남겨둠.

 - 64비트 버전 추가.( 18.0218 )
    : Yena64d.dll (ver.Debug)
	: Yena64.dll  (ver.Release)

* 신규 라이브러리 추가로 버전 갱신 : 2.10 -> 2.11




■ Ver 2.10  ( 17.1221 )
 - DirectXTex 라이브러리 추가 
    : ver.Dec.13.2017
 - DirectXTK 라이브러리 갱신
    : ver.Dec.13.2017
	
 - 텍스처 로드 함수 추가. 
    : ynTex.cpp/h
    : ynCreateTextureFromFile
    : ynCreateTextureFromFileEx  (컬러키 지원)

* 신규 라이브러리 추가로 큰 버전 갱신 : 2.05 -> 2.1



■ Ver 2.05  ( 17.1214 )
- 기본 메쉬 클래스 추가 : class ynMesh
   : ynMesh.h/cpp
- 기본 메쉬 리소스 추가 
  :  ynResource.h
  :  Sphere.ynmesh
  :  Teapot.ynmesh
  :  Box.ynmesh
  :  Corn.ynmesh
  * 기본 조명만 대응 : FVF = (XYZ | NORMAL)
  * 별도의 parsing 과정 없이 source 형태로 엔진에 추가/사용함.

- 기본 메쉬 (추가)제작 순서
  1. 3DS Max 모델링 및 저장  : Box.ase       
  2. YnModel 로 변환        : Box.ase --> Box.ynmesh
     * ynModel Exporter (ver.2.2) : ynExp_v2.2
  3. 리소스 폴더로 복사      : Yena/Res/Box.ynmesh
  4. 리소스 등록             : Yena/Rrc/ynResource.h 
     * #include "Box.ynmesh"
  5. 엔진 Rebuild / 완료. 



■ Ver 2.04  ( 17.1120 )
- 라인 셰이더 개선
 : 외부 추가색 지정가능 / Line.fx
 : 상수버퍼에 외부 추가색 추가 / YnShader.h

   struct ConstBuffer
	{
		//...

		COLOR   Color0;		//외부 지정색, 기본값은 (1,1,1,1).

		ConstBuffer() { mWorld = mView = mProj = mWVP = XMMatrixIdentity();  Color0 = COLOR(1, 1, 1, 1); }		//기본값 처리 2017.11.22.
	};
 : 라인셰이더 extern 화.





■ Ver 2.03b  ( 17.1120 )
- 키워드 삭제 및 수정
  : ynShader.h / typedef ID3DBlob*  LPBUFFER; --> 중복 선언, 제거함. YnDefine.h / "LPXDATA" 로 통합.
  : ynDefine.h / #define YN_FAILED(v)   ((v) != YN_OK) --> 오타 수정.

- 기타 기능상의 변화 없음.



■ Ver 2.03a  ( 17.0418 )
- 그리드 시스템 : 크기 및 간격 조정 인자 설정 
 : 그리드 한칸 크기 GridOffset = 10.0f 
 : 그리드 전체 크기 GridSize = 100.0f  
 : 방향축 크기 조절 AxisLength = 5.0f
 : 변경함수 
   YenaSetup
   ynGridAXisCreate



■ Ver 2.02  ( 17.0125 )
- 그리드 시스템 / 깊이버퍼 연산 항상 적용함.



■ Ver 2.02  ( 17.0124 )

- 구형 호환용 매크로 추가 : Yena.h  
 #define yn_Dev	   SV_Dev
 #define yn_View   SV_View
 #define yn_Proj   SV_Proj
 #define yn_Font   SV_Font
 ...
- 그리드 크기 변경 가능 
 YenaSetup( ..., float GridSize = 10.0f);
 ynGridAxisCreate(... , float GridSize = 10.0f);

- 버전 출력 2가지로 조절
 YenaSysInfo    : 간단 버전.
 YenaSysInfoEx  : 상세 버전. (+CopyRight)



■ Ver 2.02  ( 17.0120 )

- 에러메세지 처리 추가 :  ynError.h / cpp
- DX 에러메세지 라이브러리 추가 : DXErr.h / cpp

   

■ Ver 2.01  ( 17.0119 )
 
- 셰이더 프레임워크 개선
- 문자열 출력 클래스 개선 : class ynFont 
- 문자열 연속 출력 함수 개선  
   ynDrawTextSV
   ynFont::DawrSV
- 장치 운용 API 개선 : "ynDevice"
   ynDevice.h / cpp
    


■ Ver 2.01  ( 17.0113 )

- 버전 변경 : 2.01
- DLL 버전 제작
- 구형(YenaC 1.7.x) 과 통합 중



■ Ver 2.00  ( 16.01207 )

- ver. 2.0 개발 재시작.
- DX11.1 버전 적용 및 신규 SDK 적용
- Windows SDK 8.x  / DirectX Toolkit (Dec.5, 2015)
- Visual Studio 2015
- 엔진 접두어 통일 : 구형 접두어 'B','B3' 제거.
  전역 네임스페이스 : YENA
  전역 데이터 : yxXXX
  클래스 : ynXXX
  함수   : ynXXX
- TnL 지원 중단 
- 구형과 호환 불가





--------------------------------------------------
-- 2016 년 이전 작업 (구형) 
--------------------------------------------------

[ B3Yena ] (구 버전)
- 최종 ver.1.7.2 build.2016.03.17. 엔진확장/셰이더/지형/모델엔진 향상/ TnL 혼용지원 최종버전.
- 최초 ver.0.9.0 build.2004.02.24. 엔진 1단계 마무리. 


  
//2016.06.29 --------------------------------------------------
- ver.1.7.2 build.2016.03.17. 
- 구형 최종 / TnL 혼용지원 최종버전.
- 엔진확장 : 렌더러, 셰이더 및 스프라이트 엔진 확장 및 버그 수정.
- 스크립트 엔진 개선 : ynScript
- 지형 엔진 개선 : ynTerrain
- 모델 엔진 향상 : ynModel / 3DMax Model Exporter
- 사용자인터페이스 엔진 확장 : ynUI
- 기술데모 : "Jungle"
- 엔진 구성 버전.
  B3Yena R1 (1.7.x)
  Terrain(v2.2) 
  CharEngine (v.2.1)(XML v.1.4 v201)
  Shader (DX9/11/GL4.x)
  Lua(3)

- Engine(v.1.5.4) 는 2D 전용으로 남을 예정.
  2D게임프로젝트/ SonimGun(C++) 참조


//2014.06.15 ~ 2015.12.30 -------------------------------------
- 프로젝트 휴지기 -  


//2011.06.15 --------------------------------------------------
- DX11 확장
- 셰이더 엔진 개선
 

//2010.02.05 --------------------------------------------------
- DX10 확장 
- 셰이더 엔진 개선
- 렌더링 엔진 개선


//2004.02.24 --------------------------------------------------
- 엔진 1단계 마무리 : ver.0.9
- 셰이더 / TnL 혼용
- Application Frameworks / Renderer / Input 지원.
- Shader / Model / Effect / Sound / Script (Lua / XML) 지원.


- 문서끝-




